name: "Infrastructure pipeline"

on:
  pull_request:
    paths:
      - 'infrastructure/**'
      - '.github/workflows/terraform.yml'
  push:
    branches:
      - main
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    #    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Auth GCloud
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      - name: Setup GCloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: ./infrastructure
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infrastructure
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./infrastructure
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -var-file=environments/dev.tfvars
        continue-on-error: true
        working-directory: ./infrastructure
        env:
          TF_VAR_ct_client_id: ${{ secrets.CT_TF_CLIENT_ID }}
          TF_VAR_ct_secret: ${{ secrets.CT_TF_SECRET }}
          TF_VAR_klaviyo_auth_key: ${{ secrets.KLAVIYO_AUTH_KEY }}
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
            
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        working-directory: ./infrastructure
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file=environments/dev.tfvars
        working-directory: ./infrastructure
        env:
          TF_VAR_ct_client_id: ${{ secrets.CT_TF_CLIENT_ID }}
          TF_VAR_ct_secret: ${{ secrets.CT_TF_SECRET }}
          TF_VAR_klaviyo_auth_key: ${{ secrets.KLAVIYO_AUTH_KEY }}
